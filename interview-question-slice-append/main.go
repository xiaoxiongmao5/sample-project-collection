package main

import (
	"fmt"
	"time"
)

func main() {
	a := make([]int, 0, 2) //此时 a 这个切片，长度为0，容量为2
	//切片作为参数是值传递（本质是个结构体），其字段值不会被改变，但是指向的底层数组是引用类型，所以追加后会改变底层数组数据
	b := append(a, 1) //返回的是新的切片，切片结构体字段是b的，指向的底层数组是有和a的一样的，因为这里没有扩容
	c := append(a, 2) //同理，所以这里追加到a的时候，a的len是0，所以追加到第一个位置，因为abc的底层数组地址一样，所以影响了b

	fmt.Printf("a=%v,a的地址=%p,a的底层数组的地址=%p \n", a, &a, a)
	fmt.Printf("b=%v,b的地址=%p,b的底层数组的地址=%p \n", b, &b, b)
	fmt.Printf("c=%v,c的地址=%p,c的底层数组的地址=%p \n", c, &c, c)
	fmt.Println()
	// a=[],a的地址=0x1400000c030,a的底层数组的地址=0x14000014090
	// b=[2],b的地址=0x1400000c048,b的底层数组的地址=0x14000014090
	// c=[2],c的地址=0x1400000c060,c的底层数组的地址=0x14000014090

	time.Sleep(1 * time.Second)

	b = append(a, 3, 4)
	c = append(a, 5, 6)
	fmt.Printf("a=%v,a的地址=%p,a的底层数组的地址=%p \n", a, &a, a)
	fmt.Printf("b=%v,b的地址=%p,b的底层数组的地址=%p \n", b, &b, b)
	fmt.Printf("c=%v,c的地址=%p,c的底层数组的地址=%p \n", c, &c, c)
	fmt.Println()
	// a=[],a的地址=0x1400000c030,a的底层数组的地址=0x14000014090
	// b=[5 6],b的地址=0x1400000c048,b的底层数组的地址=0x14000014090
	// c=[5 6],c的地址=0x1400000c060,c的底层数组的地址=0x14000014090

	time.Sleep(1 * time.Second)

	b = append(a, 3, 4, 5)
	c = append(a, 5, 6, 7)
	fmt.Printf("a=%v,a的地址=%p,a的底层数组的地址=%p \n", a, &a, a)
	fmt.Printf("b=%v,b的地址=%p,b的底层数组的地址=%p \n", b, &b, b)
	fmt.Printf("c=%v,c的地址=%p,c的底层数组的地址=%p \n", c, &c, c)
	fmt.Println()
	// a=[],a的地址=0x1400000c030,a的底层数组的地址=0x14000014090
	// b=[3 4 5],b的地址=0x1400000c048,b的底层数组的地址=0x140000220c0
	// c=[5 6 7],c的地址=0x1400000c060,c的底层数组的地址=0x140000220e0

	a = a[:]
	fmt.Printf("a=%v,a的地址=%p,a的底层数组的地址=%p \n", a, &a, a)
	fmt.Printf("b=%v,b的地址=%p,b的底层数组的地址=%p \n", b, &b, b)
	fmt.Printf("c=%v,c的地址=%p,c的底层数组的地址=%p \n", c, &c, c)
	fmt.Println()
	// a=[],a的地址=0x1400000c030,a的底层数组的地址=0x14000014090
	// b=[3 4 5],b的地址=0x1400000c048,b的底层数组的地址=0x140000220c0
	// c=[5 6 7],c的地址=0x1400000c060,c的底层数组的地址=0x140000220e0
}
